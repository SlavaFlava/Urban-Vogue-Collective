"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _createSuper(r){var n=_isNativeReflectConstruct();return function(){var t,e=_getPrototypeOf(r);return _possibleConstructorReturn(this,n?(t=_getPrototypeOf(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))}}function _possibleConstructorReturn(t,e){if(e&&("object"===_typeof(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(t){if(null===t||!_isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,e)}function e(){return _construct(t,arguments,_getPrototypeOf(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(e,t)})(t)}function _construct(t,e,r){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(t,e,r){var n=[null];n.push.apply(n,e);e=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(e,r.prototype),e}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function _isNativeFunction(t){return-1!==Function.toString.call(t).indexOf("[native code]")}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}!function n(o,i,u){function c(e,t){if(!i[e]){if(!o[e]){var r="function"==typeof require&&require;if(!t&&r)return r(e,!0);if(f)return f(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}r=i[e]={exports:{}},o[e][0].call(r.exports,function(t){return c(o[e][1][t]||t)},r,r.exports,n,o,i,u)}return i[e].exports}for(var f="function"==typeof require&&require,t=0;t<u.length;t++)c(u[t]);return c}({1:[function(t,e,r){customElements.define("main-product",function(){_inherits(e,_wrapNativeSuper(HTMLElement));var t=_createSuper(e);function e(){return _classCallCheck(this,e),t.call(this)}return _createClass(e,[{key:"connectedCallback",value:function(){var e=this;this.variants=JSON.parse(this.getAttribute("data-variants")),this.options=this.querySelectorAll(".variants-option"),this.options.forEach(function(t){t.addEventListener("change",function(t){e.variantOnClick()})})}},{key:"variantOnClick",value:function(){var e="",r=(this.options.forEach(function(t){e+="".concat(t.querySelector("input:checked").value," / ")}),e=e.slice(0,-3),console.log(e),"");this.variants.map(function(t){return t.title==e&&(r=t.id)}),this.querySelector("#variants-select").value=r}}]),e}())},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvbWFpbi1wcm9kdWN0LmpzIiwibWFpbi1wcm9kdWN0LmpzIl0sIm5hbWVzIjpbInIiLCJlIiwibiIsInQiLCJvIiwiaSIsImYiLCJjIiwicmVxdWlyZSIsInUiLCJhIiwiRXJyb3IiLCJjb2RlIiwicCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiX2luaGVyaXRzIiwiTVByb2R1Y3QiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiSFRNTEVsZW1lbnQiLCJfc3VwZXIiLCJfY3JlYXRlU3VwZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJfdGhpcyIsInZhcmlhbnRzIiwiSlNPTiIsInBhcnNlIiwiZ2V0QXR0cmlidXRlIiwib3B0aW9ucyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwib3B0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInZhcmlhbnRPbkNsaWNrIiwidGVtcFZhcmlhbnQiLCJjdXJyZW50VmFyaWFudElkIiwidmFyaWFudCIsImNvbmNhdCIsInF1ZXJ5U2VsZWN0b3IiLCJzbGljZSIsImNvbnNvbGUiLCJsb2ciLCJtYXAiLCJ0aXRsZSIsImlkIl0sIm1hcHBpbmdzIjoicTNHQUFBLENBQUEsU0FBQUEsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUFBLEdBQUEsQ0FBQUosRUFBQUcsR0FBQSxDQUFBLEdBQUEsQ0FBQUosRUFBQUksR0FBQSxDQUFBLElBQUFFLEVBQUEsWUFBQSxPQUFBQyxTQUFBQSxRQUFBLEdBQUEsQ0FBQUYsR0FBQUMsRUFBQSxPQUFBQSxFQUFBRixFQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUFJLEVBQUEsT0FBQUEsRUFBQUosRUFBQSxDQUFBLENBQUEsRUFBQSxNQUFBSyxFQUFBLElBQUFDLE1BQUEsdUJBQUFOLEVBQUEsR0FBQSxHQUFBTyxLQUFBLG1CQUFBRixDQUFBLENBQUFHLEVBQUFYLEVBQUFHLEdBQUEsQ0FBQVMsUUFBQSxFQUFBLEVBQUFiLEVBQUFJLEdBQUEsR0FBQVUsS0FBQUYsRUFBQUMsUUFBQSxTQUFBZCxHQUFBLE9BQUFJLEVBQUFILEVBQUFJLEdBQUEsR0FBQUwsSUFBQUEsQ0FBQSxDQUFBLEVBQUFhLEVBQUFBLEVBQUFDLFFBQUFkLEVBQUFDLEVBQUFDLEVBQUFDLENBQUEsQ0FBQSxDQUFBLE9BQUFELEVBQUFHLEdBQUFTLE9BQUEsQ0FBQSxJQUFBLElBQUFMLEVBQUEsWUFBQSxPQUFBRCxTQUFBQSxRQUFBSCxFQUFBLEVBQUFBLEVBQUFGLEVBQUFhLE9BQUFYLENBQUEsR0FBQUQsRUFBQUQsRUFBQUUsRUFBQSxFQUFBLE9BQUFELENBQUEsRUFBQSxDQUFBYSxFQUFBLENBQUEsU0FBQVQsRUFBQVUsRUFBQUosR0NBQUssZUFBQUMsT0FBQSxlQUFBLFdBQUFDLFVBQUFDLEVBcUNBQyxpQkFyQ0FDLFdBQUEsQ0FBQSxFQUFBLElBQUFDLEVBQUFDLGFBQUFKLENBQUEsRUFDQSxTQUFBQSxJQUFBLE9BQUFLLGdCQUFBQyxLQUFBTixDQUFBLEVBQUFHLEVBQUFWLEtBQUFhLElBQUEsQ0FFQSxDQWtDQSxPQWxDQUMsYUFBQVAsRUFBQSxDQUFBLENBQUFRLElBQUEsb0JBQUFDLE1BRUEsV0FBQSxJQUFBQyxFQUFBSixLQUNBQSxLQUFBSyxTQUFBQyxLQUFBQyxNQUFBUCxLQUFBUSxhQUFBLGVBQUEsQ0FBQSxFQUlBUixLQUFBUyxRQUFBVCxLQUFBVSxpQkFBQSxrQkFBQSxFQUVBVixLQUFBUyxRQUFBRSxRQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLGlCQUFBLFNBQUEsU0FBQXhDLEdBQ0ErQixFQUFBVSxlQUFBLENBQ0EsQ0FBQSxDQUNBLENBQUEsQ0FJQSxDQUFBLEVBQUEsQ0FBQVosSUFBQSxpQkFBQUMsTUFFQSxXQUNBLElBQUFZLEVBQUEsR0FPQUMsR0FOQWhCLEtBQUFTLFFBQUFFLFFBQUEsU0FBQU0sR0FDQUYsR0FBQSxHQUFBRyxPQUFBRCxFQUFBRSxjQUFBLGVBQUEsRUFBQWhCLE1BQUEsS0FBQSxDQUNBLENBQUEsRUFFQVksRUFBQUEsRUFBQUssTUFBQSxFQUFBLENBQUEsQ0FBQSxFQUNBQyxRQUFBQyxJQUFBUCxDQUFBLEVBQ0EsSUFDQWYsS0FBQUssU0FBQWtCLElBQUEsU0FBQU4sR0FBQSxPQUNBQSxFQUFBTyxPQUFBVCxJQUFBQyxFQUFBQyxFQUFBUSxHQUFBLENBQ0EsRUFFQXpCLEtBQUFtQixjQUFBLGtCQUFBLEVBQUFoQixNQUFBYSxDQUVBLENBQUEsRUFBQSxFQUFBdEIsQ0FBQSxFQXJDQSxDQUFBLENDNENBLEVGNUNBLEdBQUEsRUFBQSxHQUFBLENBQUEsRUFBQSIsImZpbGUiOiJtYWluLXByb2R1Y3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtYWluLXByb2R1Y3QnLCBjbGFzcyBNUHJvZHVjdCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICB0aGlzLnZhcmlhbnRzID0gSlNPTi5wYXJzZSh0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS12YXJpYW50cycpKSBcblxuXG5cbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJy52YXJpYW50cy1vcHRpb24nKVxuXG4gICAgdGhpcy5vcHRpb25zLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgIG9wdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLnZhcmlhbnRPbkNsaWNrKClcbiAgICAgIH0pXG4gICAgfSlcblxuXG5cbiAgfVxuXG4gIHZhcmlhbnRPbkNsaWNrKCkge1xuICAgIGxldCB0ZW1wVmFyaWFudCA9ICcnXG4gICAgdGhpcy5vcHRpb25zLmZvckVhY2godmFyaWFudCA9PiB7XG4gICAgICB0ZW1wVmFyaWFudCArPSBgJHt2YXJpYW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dDpjaGVja2VkXCIpLnZhbHVlfSAvIGBcbiAgICAgfVxuICAgIClcbiAgICB0ZW1wVmFyaWFudCA9IHRlbXBWYXJpYW50LnNsaWNlKDAsIC0zKVxuICAgIGNvbnNvbGUubG9nKHRlbXBWYXJpYW50KVxuICAgIGxldCBjdXJyZW50VmFyaWFudElkID0gJydcbiAgICB0aGlzLnZhcmlhbnRzLm1hcCgodmFyaWFudCkgPT4gKFxuICAgICB2YXJpYW50LnRpdGxlID09IHRlbXBWYXJpYW50ID8gY3VycmVudFZhcmlhbnRJZCA9IHZhcmlhbnQuaWQgOiBmYWxzZVxuICAgICkpIFxuXG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcjdmFyaWFudHMtc2VsZWN0JykudmFsdWUgPSBjdXJyZW50VmFyaWFudElkXG4gICBcbiAgfVxuXG59XG4pXG5cbiIsIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtYWluLXByb2R1Y3QnLCBjbGFzcyBNUHJvZHVjdCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICB0aGlzLnZhcmlhbnRzID0gSlNPTi5wYXJzZSh0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS12YXJpYW50cycpKSBcblxuXG5cbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJy52YXJpYW50cy1vcHRpb24nKVxuXG4gICAgdGhpcy5vcHRpb25zLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgIG9wdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLnZhcmlhbnRPbkNsaWNrKClcbiAgICAgIH0pXG4gICAgfSlcblxuXG5cbiAgfVxuXG4gIHZhcmlhbnRPbkNsaWNrKCkge1xuICAgIGxldCB0ZW1wVmFyaWFudCA9ICcnXG4gICAgdGhpcy5vcHRpb25zLmZvckVhY2godmFyaWFudCA9PiB7XG4gICAgICB0ZW1wVmFyaWFudCArPSBgJHt2YXJpYW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dDpjaGVja2VkXCIpLnZhbHVlfSAvIGBcbiAgICAgfVxuICAgIClcbiAgICB0ZW1wVmFyaWFudCA9IHRlbXBWYXJpYW50LnNsaWNlKDAsIC0zKVxuICAgIGNvbnNvbGUubG9nKHRlbXBWYXJpYW50KVxuICAgIGxldCBjdXJyZW50VmFyaWFudElkID0gJydcbiAgICB0aGlzLnZhcmlhbnRzLm1hcCgodmFyaWFudCkgPT4gKFxuICAgICB2YXJpYW50LnRpdGxlID09IHRlbXBWYXJpYW50ID8gY3VycmVudFZhcmlhbnRJZCA9IHZhcmlhbnQuaWQgOiBmYWxzZVxuICAgICkpIFxuXG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcjdmFyaWFudHMtc2VsZWN0JykudmFsdWUgPSBjdXJyZW50VmFyaWFudElkXG4gICBcbiAgfVxuXG59XG4pXG5cblxufSx7fV19LHt9LFsxXSlcblxuIl19
